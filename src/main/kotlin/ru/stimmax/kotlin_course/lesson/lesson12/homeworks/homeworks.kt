package ru.stimmax.ru.stimmax.kotlin_course.lesson.lesson12.homeworks



fun main() {


    exe2(listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12))

    exe3(listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало",
        "ковер", "Шкаф", "часы", "Люстра", "подушка",
        "Картина", "столик", "Вазон", "шторы", "Пуф",
        "книга", "Фоторамка", "светильник", "Коврик",
        "вешалка", "Подставка", "телевизор", "Комод",
        "полка", "Абажур", "диван", "Кресло", "занавеска",
        "Бра", "пепельница", "Глобус", "статуэтка", "Поднос",
        "фигурка", "Ключница", "плед", "Тумба", "игрушка",
        "Настенные часы", "подсвечник", "Журнальный столик",
        "сувенир", "Корзина для белья", "посуда",
        "Настольная лампа", "торшер", "Этажерка"))

    println(exe4(listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало",
        "ковер", "Шкаф", "часы", "Люстра", "подушка",
        "Картина", "столик", "Вазон", "шторы", "Пуф",
        "книга", "Фоторамка", "светильник", "Коврик",
        "вешалка", "Подставка", "телевизор", "Комод",
        "полка", "Абажур", "диван", "Кресло", "занавеска",
        "Бра", "пепельница", "Глобус", "статуэтка", "Поднос",
        "фигурка", "Ключница", "плед", "Тумба", "игрушка",
        "Настенные часы", "подсвечник", "Журнальный столик",
        "сувенир", "Корзина для белья", "посуда",
        "Настольная лампа", "торшер", "Этажерка")))

    println(exe5( listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)))

    val ex6 = exe6(listOf(22, 18, 30, 45, 17, null, 60), 18)
    println(ex6)

    // Проверить, что размер коллекции больше 5 элементов.
    val a1 = listOf<Int>(1, 2, 3, 4, 5)
    if (a1.size > 5) {

    }

    //Проверить, что коллекция пустая
    if (a1.isEmpty()) {
        println("Коллекция пустая")
    }

    //Проверить, что коллекция не пустая
    if (a1.isNotEmpty()) {
        println("Коллекция размером ${a1.size}")
    }else {
        println("Коллекция пустая")
    }

    // Взять элемент по индексу или создать значение если индекса не существует
   a1.getOrElse(5) {-1}

    // Собрать коллекцию в строку
    a1.joinToString(",")

    // Посчитать сумму всех значений
    a1.sum()

    // Посчитать среднее
    a1.average()

    // Взять максимальное число
    a1.maxOrNull()

    // Взять минимальное число
    a1.minOrNull()

    //Взять первое число или null
    a1.firstOrNull()

    // Проверить что коллекция содержит элемент
    a1.contains(3)

    // Отфильтровать коллекцию по диапазону 18-30
    val a5 = a1.filter { it in 18..30 }

    // Выбрать числа, которые не делятся на 2 и 3 одновременно
    a1.filterNot { it % 2 == 0 && it % 3 ==0 }

    // Очистить текстовую коллекцию от null элементов
    val a7 = listOf("1", null, "2", null)
    a7.filterNotNull()

    // Преобразовать текстовую коллекцию в коллекцию длин слов
    val a8 = a7.filterNotNull().map { it.length }

    // Преобразовать текстовую коллекцию в мапу,
    // где ключи - перевёрнутые слова, а значения - длина слов
    val a9 = listOf("Вася", "Ульяна", "Ким Чен Ын")
    val a10 = a9.associate { it.reversed() to it.length }

    //Отсортировать список в алфавитном порядке
    a9.sorted()

    // Взять первые 3 элемента списка
    a9.take(3)

    // Распечатать квадраты элементов списка
    val a11 = listOf(1, 2, 3, 4 , 5 )
    a11.forEach {
        println(it * it)
    }

    // Группировать список по первой букве слов
    val b1 = listOf("Вася", "Ульяна", "Ким Чен Ын", "Вася", "Коперник", "Володя")
    val b2 = b1.groupBy { it.first() }
    println(b2)

    // Очистить список от дублей
    val b3 = b1.distinct()
    println(b3)

    // Отсортировать список по убыванию
    val b4 = listOf(1, 3, 8, 4890 , -7)
    val b41 = b4.sortedDescending()
    println(b41)

    //Взять последние 3 элемента списка
    val b42 = b4.takeLast(3)
    println(b42)

}

// Напиши функцию, которая принимает коллекцию чисел
// и возвращает строку с характеристикой коллекции используя конструкцию when
//Если коллекция пустая - “Пусто”
//Если количество элементов меньше пяти - “Короткая”
//Если коллекция начинается с 0 - “Стартовая”
//Если сумма всех чисел больше 10000 - “Массивная”
//Если среднее значение равно 10 - “Сбалансированная”
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//Если максимальное число меньше -10 - “Отрицательная”
//Если минимальное число больше 1000 - “Положительная”
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”

    fun exe1(list: List<Int>): String {
        val collection = when {
            list.isEmpty() -> "Пусто"
            list.size < 5 -> "Короткая"
            list.firstOrNull() == 0 -> "Стартовая"
            list.sum() > 10000 -> "Массивная"
            list.average() == 10.0 -> "Массивная"
            list.joinToString("").length == 20 -> "Клейкая"
            (list.maxOrNull() ?: 0) < -10 -> "Отрицательная"
            (list.minOrNull() ?: 0) > 1000 -> "Положительная"
            list.contains(3) && list.contains(14) -> "Пи***тая"
            else -> "Уникальная"
        }
        return ""

    }

//Напиши функцию, которая принимает список чисел и возвращает список чисел.
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//Цель: Отфильтровать удовлетворительные оценки (>=60),
// отсортировать оставшиеся по возрастанию и взять первые 3.
// Вызывай методы обработки и фильтрации последовательно
// один из другого, чтобы результат предыдущего метода являлся основой для следующего.

fun exe2(list: List<Int>): List<Int> {
     val ls = list
         .filter { it >= 60 }
         .sorted()
         .take(3)
    println(ls)
     return list
}


//Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//Начальные значения: val list = listOf(
//"Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер",
// "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик",
// "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник",
// "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка",
// "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус",
// "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка",
// "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья",
// "посуда", "Настольная лампа", "торшер", "Этажерка")

fun exe3(list: List<String>): Map<Char, List<String>> {
    val mp = list
        .map { it.lowercase() }
        .groupBy { it.first() }
    println(mp)
    return mp
}

//Задание 27. Подсчёт средней длины слов в списке
//Напиши функцию, которая принимает список строк и возвращает строку.
// Начальные значения взять из предыдущей задачи.
// Цель: Перевести все слова в количество букв,
// подсчитать среднее значение. Вернуть форматированный текст
// с двумя знаками после запятой, используя функцию format и подходящий шаблон.

fun exe4(list: List<String>): String {
    return String.format("%.2f", list.map { it.length.toDouble() }.average())
}

// Задание 28: Категоризация чисел
// Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
// Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
// Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).

fun exe5(list: List<Int>): Map<String, List<Int>> {
    val mp =  list.distinct()
        .sortedDescending()
        .groupBy { if (it % 2 == 0) "четные" else "нечетные" }
    return mp
}

// Задание 29: Поиск первого подходящего элемента
// Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
// Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
// Цель: Найти первый возраст в списке,
// который соответствует условию (больше второго аргумента)
// и вернуть его, либо null если значения не нашлось.

fun exe6(list: List<Int?>, number: Int): Int? {
    return list.filterNotNull().firstOrNull() { it > number }

}

