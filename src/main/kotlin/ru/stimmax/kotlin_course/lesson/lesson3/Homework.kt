package ru.stimmax.ru.stimmax.kotlin_course.lesson.lesson3

// 1. Название мероприятия (неизменяемая публичная переменная известная на момент написания)
val name:String = "GO-Hackathon"
// 2. Дата проведения (публичная не изменяемая известная на момент написания)
const val date:String = "11.09.25"
// 3. Место проведения(известное заранее публичное изменяемое)
var place:String = "Marsovo_Pole"
// 4.Подробный бюджет мероприятия, включая расходы на оборудование, кейтеринг и другие операционные расходы.
//(приватное не изменяемое заранее определенное)
private val budget_operating_expenses:String = "10000000000 рублей"
// 5.Количество участников ( публичное изменяемое заранее изветное)
var quantity:Int = 500
// 6. Длительность хакатона (публичное заранее известное  не изменяемое)
val time:String = "48 часов"
// 7.Контактная информация и условия соглашений с поставщиками пищи, оборудования и других услуг.
//(приватное определенное неизменяемое)
private val contactsContract:String = "Здесь ссылка на контакты и контракты"
// 8. Текущее состояние хакатона (статус)
//(известное заранее публичное изменяемое)
var status:String = "ожидает проведения"
// 9. Список спонсоров (публичное не изменяемое определенное заранее)
val list_of_sponsors:String = "Здесь список спонсоров"
// 10. Бюджет мероприятия(приватное будет инициализирована после проведения изменяемое)
private lateinit var budget:String
// 11. Текущий уровень доступа к интернету(приватное известное заранее не изменяемое)
private val vlv_int_access:String by lazy {
    "Тут уровни доступа"
}
// 12. Информация о транспортировке оборудования, распределении ресурсов и координации между различными командами поддержки.
// (приватное будет инициализировано позже изменяемое)
private lateinit var log_equip_team_coordination:String
// 13. Количество команд(публичное будет инициализированно сразу изменяемое)
 var nmr_of_teams:Int = 10
// 14. Перечень задач(приватное инициализация ленивая неизменяемое)
private val list_of_tasks by lazy {
    "tasks"
}
// 15. План эвакуации(публичное неизменяемое заранее известное)
val evacuation_plan:String = "plan"
//  16. Список доступного оборудования (всё, что выделено для использования на мероприятии)
//(приватное известное заранее не изменяемое)
private val list_equipment:String = "list"
// 17. Список свободного оборудования (всё, что можно взять прямо сейчас и что не занято другими участниками)
//(публичное изменяемое инициализация позже)
lateinit var free_equipment:String
// 18. График питания участников (зависит от поставщика питания, определяемого за неделю до начала)
//(публичное изменяемое)
var foodSchedule:String = "Не установлено"
    get(){
        println("Не определен")
        return field
    }
    set(value){
        println("Установили новый график питания: $value")
        field = value
    }
// 19.План мероприятий на случай сбоев
// (публичное изменяемое)
var contingencyPlan:String = "Не установлен"
    set(value) {
        if (value != "") {
            println("Установлен план $value")
            field = value
        } else {
            println("Нельзя установить пустой план")
        }
    }
// 20. Список экспертов и жюри
// (публичное изменяемое инициализируется позже)
lateinit var juryList:String
// 21.Политика конфиденциальности
// (публичная инициализация сразу неизменяемая)
val privacyPolicy:String = "confPolicy"
// 22.Приватные отзывы (фидбэк) участников и зрителей для анализа проблем
// (приватные изменяемые инициализация не сразу)
private lateinit  var feedback:String
// 23.Текущая температура в помещении
// (публичная изменяемая инициализация по вызову)
lateinit var currentTemperature:String
// 24. Данные мониторинга и анализ производительности сетевого оборудования и интернет-соединения
// для целей отладки своих приложений командами
// (приватная изменяемая инициализация позже)
lateinit var networkDebugMetrics:String
// 25. Регулятор скорости интернета (понижающий коэффициент, например 0.5)
// (приватный изменяемый инициализация сразу)
private var connectionThrottle:Double = 1.0
    set(value){
        field  = value * 0.5
    }
// 26. Уровень освещения(приватное заранее известное не изменяемое инициализация по вызову)
private val lightLvl:String by lazy {
    "lightLevel"
}
// 27. Лог событий мероприятия(приватное изменяемое инициализируется позже)
private lateinit var eventLog:String
// 28.Возможность получения медицинской помощи прямо на мероприятии (да/нет)
// (публичное неизменяемое инициализация сразу)
var medicalHelp:Boolean = true
// 29.Планы и процедуры для обеспечения безопасности мероприятия,
// включая планы эвакуации и протоколы чрезвычайных ситуаций.
// (приватное инициализация по вызову не изменяемое)
private val emergencyProtocols:String by lazy {
    "safetyPlan"
}
// 30.Регистрационный номер мероприятия
// (публичное не изменяемое инициализация сразу)
val eventRegNumber:Int = 555
// 31. Максимально допустимый уровень шума в помещении хакатона.
// (приватное определенное неизменяемое)
private const val noiseLevelThreshold:String = "100 Дб"
// 32. Индикатор превышения уровня шума в помещениях (превышен или не превышен в данный момент)
// (изменяемое приватное инициализация отложенная)
private  var noiseLevelExceeded:Boolean? = null
// 33. План взаимодействия с прессой
// (публичный неизменяемый инциализация по запросу)
val pressPlan:String by lazy{
    "Plan"
}
// 34. Детальная публичная информация о проектах каждой команды,
// сбор данных включает в себя компиляцию
// кода и сбор статистики прогона автоматизированных проверок.
// (публичная изменяемая инциализация отложена)
lateinit var teamProjectAnalytics:String
// 35. Статус получения всех необходимых разрешений для проведения мероприятия
// (приватное будет определено изменяемое)
private var isEventApproved:Boolean? = null
// 36. Индикатор доступности специализированного оборудования в данный момент
// (например, специальному оборудованию)
// (публичное определенное изменяемое)
var specialEquipmentAvailable:Boolean? = null
}